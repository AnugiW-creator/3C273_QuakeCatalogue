######################## START HERE ##########################
#  I would recommend copy and pasting this code onto Spyder or another IDE of your choice
!pip install obspy # You can comment out this line if running on Spyder (make sure to install obspy via the IPython console)
import numpy as np
import pandas as pd
from obspy import read
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os
from obspy.signal.invsim import cosine_taper
from obspy.signal.filter import highpass
from obspy.signal.trigger import classic_sta_lta, plot_trigger, trigger_onset

def max_ratio(c,d):
    d_max = max(d)
    c_arr = 0
    for i in range(len(c)):
        if d[i] == d_max:
            c_arr = c[i]
    return c_arr

# First pick a row from the catalogue and note down the arrival time of the quake
# Need to upload datasets to drive
cat_directory = 'C:/My Documents/NASA Space Apps 2024/space_apps_2024_seismic_detection/data/lunar/training/catalogs/'
cat_file = cat_directory + 'apollo12_catalog_GradeA_final.csv'
cat = pd.read_csv(cat_file)
#row = cat.iloc[11]
cat_length = cat.shape[0]

arrival_time_manual = []
for j in range(cat_length):
    row = cat.iloc[j]
    #arrival_time = datetime.strptime(row['time_abs(%Y-%m-%dT%H:%M:%S.%f)'],'%Y-%m-%dT%H:%M:%S.%f')

    # Use relative time
    arrival_time_rel = row['time_rel(sec)']
    print('arrival time from catalogue:', arrival_time_rel)

    test_filename = row.filename # name of test file
    data_directory = 'C:/My Documents/NASA Space Apps 2024/space_apps_2024_seismic_detection/data/lunar/training/data/S12_GradeA/'
    mseed_file = f'{data_directory}{test_filename}.mseed'
    st = read(mseed_file)
    #print(st)

    tr = st.traces[0].copy()
    tr_times = tr.times()
    tr_data = tr.data
    # Sampling frequency of our trace
    df = tr.stats.sampling_rate

    # Intervals sizes seem to work for most of the quakes, however trigger sizes need to be changed for some quakes
    sta_len = 800
    lta_len = 9500


    # Run Obspy's STA/LTA to obtain a characteristic function
    # This function basically calculates the ratio of amplitude between the short-term
    # and long-term windows, moving consecutively in time across the data
    cft = classic_sta_lta(tr_data, int(sta_len * df), int(lta_len * df))

    # Plot characteristic function - it would be best to try this with individual quakes
    # with less accurate arrival_time results.
# =============================================================================
#     fig,ax = plt.subplots(1,1,figsize=(12,3))
#     ax.plot(tr_times,cft)
#     ax.set_xlim([min(tr_times),max(tr_times)])
#     ax.set_xlabel('Time (s)')
#     ax.set_ylabel('Characteristic function')
# =============================================================================

    print(max(cft))

    print('arrival time from catalogue:', arrival_time_rel)
    print('arrival time using characteristic func:', arrival_time(tr_times, cft))
    arrival_time_manual.append(max_ratio(tr_times, cft))

    # The triggers need to be changed for some of the quakes
    thr_on = 7 # Some quakes require thr_on = 10
    thr_off = 2.5 # thr_off = 2.5 works in most cases
    on_off = np.array(trigger_onset(cft, thr_on, thr_off))

    # Plot on and off triggers
    fig,ax = plt.subplots(1,1,figsize=(12,6))
    for i in np.arange(0,len(on_off)):
        triggers = on_off[i]
        ax.axvline(x = tr_times[triggers[0]], color='red', label='Trig. On')
        ax.axvline(x = tr_times[triggers[1]], color='purple', label='Trig. Off')


    print(tr_times[triggers[0]])

    # Plot seismogram and save directly to folder without showing plots.
    path = 'C:/My Documents/NASA Space Apps 2024/Training_graphs/' # If running the code on your own computer, create a folder to save plots in and replace this path with it.
    newfile = test_filename + '_seismogram.jpg'
    ax.plot(tr_times,tr_data)
    ax.set_xlim([min(tr_times),max(tr_times)])
    ax.legend()
    fig.savefig(f'{path}{newfile}')
    plt.close(fig)

    # save into catalogue
    triggers = on_off[i]
    on_time = starttime + timedelta(seconds = tr_times[triggers[0]])
    on_time_str = datetime.strftime(on_time,'%Y-%m-%dT%H:%M:%S.%f')
    detection_times.append(on_time_str)
    fnames.append(test_filename)

# Print catalogue
training_cat = pd.DataFrame(data = {'filename':fnames, 'time_abs(%Y-%m-%dT%H:%M:%S.%f)':detection_times, 'time_rel(sec)':tr_times[triggers[0]]})
training_cat.head()
